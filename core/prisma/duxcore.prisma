datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SUPER_ADMINISTRATOR
  ADMINISTRATOR
  MODERATOR
  USER
}

model User {
  id                   String                 @id @default(uuid())
  index                Int                    @default(autoincrement())
  firstName            String
  lastName             String
  email                String                 @unique
  password             String?
  loginAttempts        UserLoginAttempts[]
  created              DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  role                 UserRole               @default(USER)
  meta_tags            UserMetaTags?
  refreshTokens        UserRefreshToken[]
  meta                 Json                   @default("{}")
  UserEmailResetTokens UserEmailResetTokens[]
  ServiceCollection    ServiceCollection[]
}

model UserMetaTags {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  updatedAt     DateTime @updatedAt
  emailVerified Boolean  @default(false)
  isStaff       Boolean  @default(false)
}

model UserLoginAttempts {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  ip           String
  user         User     @relation(references: [id], fields: [userId])
  userId       String
  accepted     Boolean
  denialReason String?
}

model UserRefreshToken {
  id      Int      @id @default(autoincrement())
  token   String   @default(uuid())
  user    User     @relation(references: [id], fields: [userId])
  created DateTime @default(now())
  userId  String
  revoked Boolean  @default(false)
}

model UserEmailResetTokens {
  id      Int      @id @default(autoincrement())
  token   String   @default(uuid())
  email   String
  user    User     @relation(references: [id], fields: [userId])
  created DateTime @default(now())
  userId  String
}

model ServiceCollection {
  id    String @id @default(uuid())
  index Int    @default(autoincrement())

  name String

  creator   User   @relation(references: [id], fields: [creatorId])
  creatorId String

  created  DateTime @default(now())
  upatedAt DateTime @updatedAt
}
