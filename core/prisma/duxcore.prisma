datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMINISTRATOR
  USER
}

enum NodeJSPkgManager {
  YARN
  NPM
}

enum ServiceStatus {
  ONLINE
  OFFLINE
  UNKNOWN
  INSTALLING
  BUILDING
  SUSPENDED
  SETTING_UP
}

model User {
  id            String              @id @default(uuid())
  index         Int                 @default(autoincrement())
  firstName     String
  lastName      String
  email         String              @unique
  password      String?
  loginAttempts UserLoginAttempts[]
  created       DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  role          UserRole            @default(USER)
  meta_tags     UserMetaTags?
  refreshTokens UserRefreshToken[]
  meta          Json                @default("{}")

  UserEmailResetTokens UserEmailResetTokens[]
  projects             Project[]
}

model UserMetaTags {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  updatedAt     DateTime @updatedAt
  emailVerified Boolean  @default(false)
  isStaff       Boolean  @default(false)
}

model UserLoginAttempts {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  ip           String
  user         User     @relation(references: [id], fields: [userId])
  userId       String
  accepted     Boolean
  denialReason String?
}

model UserRefreshToken {
  id      Int      @id @default(autoincrement())
  token   String   @default(uuid())
  user    User     @relation(references: [id], fields: [userId])
  created DateTime @default(now())
  userId  String
  revoked Boolean  @default(false)
}

model UserEmailResetTokens {
  id      Int      @id @default(autoincrement())
  token   String   @default(uuid())
  email   String
  user    User     @relation(references: [id], fields: [userId])
  created DateTime @default(now())
  userId  String
}

model DaemonRegion {
  id   String @id @default(uuid())
  name String
  code String

  created DateTime @default(now())
  daemons  Daemon[]
}

model Daemon {
  id      String   @id @default(uuid())
  code    String // <region code>-<region-discriminator>
  name    String
  created DateTime @default(now())

  host   String
  port   String
  wsPort String  @default("8001")
  secure Boolean
  secret String

  cpuCeil  Float @default(16.0)
  memCeil  Float @default(16384)
  diskCeil Float @default(120)

  region              DaemonRegion @relation(references: [id], fields: [regionId])
  regionId            String
  regionDiscriminator String       @unique

  services Service[]
}

model Project {
  id        String   @id @default(uuid())
  index     Int      @default(autoincrement())
  name      String
  creator   User     @relation(references: [id], fields: [creatorId])
  creatorId String
  services  Service[]
  created   DateTime @default(now())
  upatedAt  DateTime @updatedAt
}

model Service {
  id String @id @default(uuid())
  name String
  project Project @relation(references: [id], fields: [projectId])
  projectId String
  daemon Daemon @relation(references: [id], fields: [daemonId])
  daemonId String

  params Json

  cpu Float
  mem Float
  disk Float

  status ServiceStatus
  createdAt DateTime @default(now())
  upatedAt DateTime @updatedAt
}
